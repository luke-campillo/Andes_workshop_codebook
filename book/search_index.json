[["index.html", "Finding Mutations Chapter 1 Getting Started", " Finding Mutations Rachel Schwartz 2021-05-21 Chapter 1 Getting Started This book will walk you through how to find mutations among a trio of individuals, two parents and a child, using genomic data and basic command line tools. "],["intro.html", "Chapter 2 Introduction", " Chapter 2 Introduction How different are you from your parents? You might know that half of your DNA comes from each parent. Despite this 50-50 split you are actually both more and less similar to your parents. First, approximately 90% of DNA is identical among all humans. This should make sense because changes to a lot of our DNA would alter our blueprint in a way that might not be successful. However, two randomly selected people generally only differ less than 0.6% of their genome. On the other hand, you aren’t exactly inheriting half of your DNA from each parent because some mutations occurred when each parent passed down their DNA. Based on recent whole genome studies in families, we think that the de novo mutation rate in humans is approximately 1.1 × 10^-8 per haploid genome (1000 Genomes Project Consortium, 2010; Roach et al., 2010). By this estimate, an individual’s diploid genome harbors, on average, around 64 de novo mutations among 3.2 billion base pairs. Keep in mind that is an average. This tutorial steps through the basic process of finding new mutations in an individual using genome sequence data. Some of you may work with human genomes, while others work with other species. "],["genomic-data.html", "Chapter 3 Genomic data", " Chapter 3 Genomic data By definition genomes are large. The human genome is 3.2 billion base pairs. If you were to go through and compare two parents and a child by hand to discover the differences between them it would take a while. To add to this complexity, genomes don’t come off the sequencer as a 3.2 billion base pair sequence, but as millions of small fragments. Think of this sequencing method as tossing a book (your genome) into a paper shredder. That means first you have to compare each fragment to a “reference genome” (like the real book) and then figure out where your genome differs from the reference. This is definitely a process you don’t want to do by hand! A computer (at least a big one with lots of computing power) can help us out by automating all these comparisons. That means that before we can identify how the sequence of a child differs from its parents we need to build some skills to communicate with our large high-performance computer. "],["computational-skills.html", "Chapter 4 Computational skills 4.1 Log in to the server 4.2 Basic navigation", " Chapter 4 Computational skills The high-performance computer we’ll use for our data doesn’t have the graphical interface you usually use (like a PC or Mac). That means you have to type in your commands - you can’t point and click. This actually has a hidden benefit because it’s easy to write down what you did in a line of text rather than having to try to explain where to click on each step. Let’s start by learning how to log in the our server and run commands without clicking. If you have a PC you’ll need git-bash. If you have a Mac you can open Terminal (you may need to search for it). 4.1 Log in to the server You will need to log in to one of our campus high-performance computing clusters. The one we will use for our work is called Seawulf. Use the command ssh followed by your username (your email) @seawulf.uri.edu. Then type your password (you won’t be able to see it). ssh rsschwartz@seawulf.uri.edu Now you are logged in to seawulf. That means all of your work will be done on this computer (even though it might seem like you are still typing on your own computer). 4.2 Basic navigation To see the list of files on this computer in your directory do the following: ls This folder might be empty because you haven’t put anything here. Let’s start our project by getting organized. First, you can make a directory to put your scripts in. We’ll write these scripts in a little while, but basically a script is a list of commands that you will give the computer to do all the steps to analyze your data. To make a directory you need to things - the command to make the directory and the name of that directory. mkdir scripts To practice, repeat this process but make a directory called results. Now list the files in your current home directory again. Do you see the two folders you just made? If you want to check out what is in these folders (they are currently empty but we will add to them later) you need to change directory with the cd command. Think about these folder just like a filing cabinet. You started off in your home folder and now you are opening the scripts folder. cd scripts Now to get back to your home folder you can’t cd and give it a folder name because the computer will look in your current folder (scripts) for another folder. Instead you need to tell the computer to “move one level up”, going outside the current folder to the one containing it. cd .. We will learn lots more commands as we work through our data. Adapted from http://swcarpentry.github.io/shell-novice/ "],["getting-your-data.html", "Chapter 5 Getting your data", " Chapter 5 Getting your data If you want to figure out how many new mutations a child, has you need information from three individuals: two parents and child. The sequence data for a real trio of humans are in a shared folder on seawulf. Because the data aren’t in your folder we need to take a look at where they are relative to your folder. To see where your folder is print your working directory. pwd For comparison, the data are in /home/shared/human_CEU_trio or alternatively (relative to your home folder) ../shared/human_CEU_trio. That means that from the root folder (think of this like your whole file cabinet) the data are in a shared folder inside a home folder or relative to your home folder you would go to the enclosing folder (home) and the inside the shared folder and then inside human_CEU_trio. If you list the contents of that folder you can see the three files full of data. ls /home/shared/human_CEU_trio There are three individuals. One child (NA12878) and two parents (NA12891 and NA12892). At any given base you expect the child has one copy from one parent and the other copy from the other parent. You need to find the bases in the genome where one of the sequences at that position in the genome (A,C,G, or T) did not come from either parent. To do this you will need to align each raw data file to the reference human genome determine the sequence for each base in the genome for each individual determine whether there is a mutation at each site Raw data is in the form of zipped fastq files, which are generated by a sequencer. You can tell this by the very last bit of the name of the files, which is .fastq.gz (just like you might see Word files labeled as .docx). Just as a note, you often need to do some cleanup of the data that comes of the sequencer so you only have high quality data. We have done this step for you already. Take a look at a little bit of one file. The less command lets you scroll through the (very large) file. zless is the less command that works on zipped files. Fastq files contain sets of four lines. The first line is the name of the sequence. The second line is the sequence. The fourth line is the quality of the sequence. As you scroll through you should see many sets of four (one for each sequence). zless -S /home/shared/human_CEU_trio/NA12878/U0a_CGATGT_L001_R1_001.fastq.gz Once you are done scrolling use q (for quit) to get back to your prompt. "],["alignment.html", "Chapter 6 Alignment", " Chapter 6 Alignment First make a folder in your home directory to hold your aligned files. mkdir alignment Now we need to run the program to figure out where all those short reads came from in the genome. This is called aligning. However, before we do this, we have to recognize that this process might take a while. Currently we are all logged into the same computer so if we all try to analyze our data on this one computer it will overload the system. Fortunately this computer is part of a computing cluster. That means if we write down our command this computer can send the information to another computer to run our job. Let’s start by making a file that contains our command, which we’ll call a script. nano scripts/alignment_script.sh See how I made my script inside the scripts folder to keep everything organized? That .sh on the end also says something about this file - in this case it is a script that can be run in our computing “shell”. Let’s add the command we need to run to our script bowtie2 -p 20 -x /home/shared/human_reference/hg38 -1 /home/shared/human_CEU_trio/NA12878/U0a_CGATGT_L001_R1_001.fastq.gz -2 /home/shared/human_CEU_trio/NA12878/U0a_CGATGT_L001_R1_001.fastq.gz -S results/U0a_CGATGT_L001_001.sam What does this command mean? First we have bowtie2, which is the name of the program we are using. Then we have a series of “flags” (they start with -) followed by some information., The -p flag tells you how many processors you get to use. Each of the computers available to us has 20 processors, which means things go a lot faster than on your laptop. The -x flag says what reference genome we want to align to. That’s going to be in /home/shared/human_reference and its name is hg38. Now we list the path to our fastq sequence files with the -1 and -2 flags. And finally we use the -S flag to say where we want our output to go. This file has a .sam extension because that’s what the makers of this program have called this output file format. Now that we have our command we need to add a few things to this script. First we need to add at the top of the file some information for the computer on how it is supposed to run it. The computer needs to know a couple of things, including how many processors you plan to use and how much time you need. This will help the computer allocate computer power to you and share amongst everyone wanting to analyze data. We’ll also have the computer send you an email when the job is done (enter your email address). #SBATCH --nodes=1 #SBATCH --ntasks-per-node=20 #SBATCH --time=200:00:00 #SBATCH --mail-user=&lt;your email here&gt; Next, we are running the program bowtie2 so we need to tell the computer to load this program so it can use it. Between your SBATCH commands and your bowtie command add module load Bowtie2/2.3.4.2-foss-2018b Finally, you need to tell the computer that this is a “shell” script. The first line of every script has a “shebang” line that specifies how the computer should interpret the code. #!/bin/sh Now you can tell the computer to run the script. sbatch scripts/alignment_script.sh Now make a copy of the script `cp scripts/alignment_script.sh scripts/alignment_script2.sh`` See how the copy command (cp) takes two arguments: the source and destination. Edit this script so your bowtie command uses the second set of fastq files and produces results with the correct name. Then copy the command to a new line for the third set of files and so on and so forth. Copying and pasting to analyze all your files will take a while, so later on we will learn how to tell the computer to go through a list of files and analyze them all with the same approach. Computers are great at repeating analyses. Run this script. You can check the output as it goes by printing the contents of the slurm output file. Use ls to get the name of your output file (everyone’s is unique). Then use cat and the name of the file to see its contents. Now you can take a look at one of your output sam files. less results/U0a_CGATGT_L001_001.sam The less command allows you to scroll through the file. Type q to go back to your prompt. This file is in a special format with a lot of information about where each read came from in the reference genome and also how well it aligned to that location. Before we look more closely, did you notice that you are scrolling through a lot of header information before you got to any real data. You can ask the computer to search for and only print files that aren’t header lines. Header lines start with @SQ so that’s what we’ll have the computer print - anything that matches that pattern. The search command is grep. We also need to specify we want lines that don’t start with @SQ. If you are searching for lines that start with @SQ you need that information plus the code for “starts with”, which is ^. Finally you need to specify you want the opposite lines, so you’ll use a “flag” -v. Then you’ll need to add the file name as an argument. Here’s the command but don’t type it yet! This will print out a ton of data. grep -v '^@SQ' U0a_CGATGT_L001_001.sam You want to be able to scroll through with less. To do this we are going to the take the output of our grep command and instead of sending it to the cammand line (ie printing everything to the screen), we will “pipe” the output using the | (you can find it above your Enter key) to the less command. grep -v '^@SQ' U0a_CGATGT_L001_001.sam |less There’s a lot of information here but don’t worry too much about the details. Each line is just information about where that sequence aligned to the human genome and how well it aligned. These alignments allow other programs to figure out what the sequence is for each base in each individual. These files are rather large, but we can compress them into bam format, which makes them take less space and also makes them easier to work with. You can convert a sam file to a bam file using the following command. samtools view -b -o U0a_CGATGT_L001_001_mapped.bam U0a_CGATGT_L001_001.sam Rather than type this on the command line (where you will forget what you typed), make a new script with this command instead of the bowtie command. I advise copying the alignment script (give it a useful name) and put this command in place of the bowtie line. Also add this samtools view command for your other files. Did you notice how this command has flags and arguments (output then input files) just like other command line commands? The program samtools is a set of tools for working with sam files. The view command loads the file. The o flag sets the name of the output file. The b flag outputs in bam format. All the samtools commands and flags can be found at http://www.htslib.org/doc/samtools.html Adapted from https://datacarpentry.org/wrangling-genomics/ "],["variant-calling.html", "Chapter 7 Variant Calling", " Chapter 7 Variant Calling https://www.youtube.com/watch?v=wzjhhUaErWc https://github.com/ekg/alignment-and-variant-calling-tutorial https://gencore.bio.nyu.edu/variant-calling-pipeline-gatk4/ https://github.com/CBC-UCONN/Variant-Calling "],["results.html", "Chapter 8 Results 8.1 What does your tree tell you?", " Chapter 8 Results 8.1 What does your tree tell you? You will need to compare your tree to what’s in the literature. Go back to the first readings you did and continue to explore. Are your results novel (e.g. have you determined relationships among species that no one had investigated)? Do your results confirm or refute prior work? "],["sharing-your-results.html", "Chapter 9 Sharing your results 9.1 Start reading 9.2 Presentation 9.3 Writing a paper", " Chapter 9 Sharing your results 9.1 Start reading 9.1.1 Develop a bibliography You’ll need to keep track of everything you are reading. Try Zotero. 9.2 Presentation Slides on your study group. Don’t forget to convince your uninformed audience that this is the most fascinating group in the world with lots to help up understand about evolution. Slides on the information that isn’t known about this group - i.e. the question you will answer. Make sure we’re convinced that the question you answer will help us address all those cool questions you raised in 1. Your methods - briefly. Describe the approach, not the steps you take on the computer. Talk about methods, not software. Your tree. Highlight new information. Conclusions. What implications do your results have for evolutionary biology? Tips: https://research.usu.edu/undergradresearch/oral-presentations/ Great example: https://www.youtube.com/watch?v=fZ0NzM6g7jk 9.3 Writing a paper Your presentation forms a great outline for your final paper. Start by writing down everything you said for your presentation. Try noting different subsections. You might have to read more to completely elaborate on what you want to communicate. A professional scientific paper is approximately 4000-8000 words. However, your work, being focused on the phylogeny and perhaps not including any further discussion of evolution, is likely appropriate for a note in the jounal Molecular Phylogenetics and Evolution. Read their publishing guide. Example paper: https://www.scopus.com/record/display.uri?eid=2-s2.0-85030790294&amp;origin=inward&amp;txGid=b595bcdd0a2d7c7bb08bb94ba060397f https://writing-speech.dartmouth.edu/learning/materials/sources-and-citations-dartmouth 9.3.1 Intro 9.3.2 Methods https://www.youtube.com/watch?v=JzWUmkxlbEw 9.3.3 Results 9.3.4 Discussion "]]
